/* Author: Rehna Anthru
 * Sub: Employee Application using inheritance
 * Date: 3/3/2022
 */

/*1) Employee will have the following attributes. Make it protected so that the 
subclasses can inherit them 
• A string name 
• A double salary
(For this application, we’ll assume that salary entered by 
user for full-time is yearly, part-time & intern is hourly 
and contractor is for total contract period)
• String ssn 
• A final int employeeId (final is constant in java, 
the value cannot be changed) 
• A static int class variable called nextId 
initialized to 1 
➢ The employee’s ID number will be generated by your 
application, not sent as a parameter to the 
constructors, using the static class member 
Employee.nextId. Each time an employee is created, 
the nextId must be assigned into that employee’s 
ID number, then the next ID must be incremented. 
This way, no two employees will ever have the same 
ID. 
2) Constructors: 
• The Employee class will have one constructor that 
takes values of all attributes except employeeId. 
employeeId will be application generated value 
assigned to nextId and increment next id by 1 (using 
post increment operator)
3) Methods: 
• Employee will have a public abstract method called getPay that doesn’t take 
any parameters and returns a double 
• Implement a toString() function that will format the attributes of Employee
 * 
 */
public abstract class Employee {
	
	//declaring the protected variables
	protected String name;
	protected double salary;
	protected String ssn;
	protected final int employeeID;
    protected static int nextId=1;
    //constructor
	protected Employee(String name, double salary, String ssn) {
		
		this.employeeID =nextId++;
		this.name=name;
		this.salary=salary;
		this.ssn=ssn;
		
	}
	abstract double getPay();

	@Override
	public String toString() {
		return "Employee [name=" + name + ", salary=" + salary + ", ssn=" + ssn + ", employeeID=" + employeeID + "]";
	}
}
